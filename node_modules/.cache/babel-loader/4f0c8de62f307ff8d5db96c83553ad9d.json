{"ast":null,"code":"var _jsxFileName = \"/Users/Phillipe/sei/code-alongs/culture_club/culture-club-app/src/App.js\";\nimport React, { Component } from 'react';\nimport Main from './components/main/Main';\nimport UserStore from './components/UserStore'; // import Turbulance from './components/Turbulance'\n\nimport './App.css';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      session: false\n    };\n\n    this.handleSession = session => {\n      this.setState(state => ({\n        session: !state.session\n      }));\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Main, {\n      onLogIn: this.handleSession,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default App; // class App extends React.Component {\n//   constructor(props) {\n//   super(props);\n//   this.state = {\n//   counter: 0\n//   }\n//   this.updateCounter = this.updateCounter.bind(this);\n//   }\n//   updateCounter(type){\n//   var count = this.state.counter;\n//   type==’increment’? count++: count — ;\n//   this.setState({counter: count});\n//   }\n//   render() {\n//   return (<div>\n//   Value of counter in parent is {this.state.counter}\n//   </div>\n//   )\n//   }\n//   }\n//   Now we would create a child component that has 2 buttons.\n//   class Child extends React.Component{\n//   constructor(props) {\n//   super(props);\n//   }\n//   render() {\n//   return (<div>\n//   <h1>Hello, React..</h1>\n//   <p>I am form child and the buttons below are fom child. Click on the corresponding buttom to update counter value in parent</p>\n//   <button>Increment</button><br/><br/>\n//   <button>Decrement</button>\n//   </div>\n//   )\n//   }\n//   }\n//   Now, in order to make the updateCounter function in parent to be available to the child component, we pass it as a property to the child component. Render block in our Parent/App component can be updated as follows:\n//   render() {\n//   return (<div>\n//   Value of counter in parent is {this.state.counter}\n//   <Child onClick={this.updateCounter}/>\n//   </div>\n//   )\n//   }\n//   In order to use the function in child component, now we can simply use {this.props.onClick} on button click in the child component and pass the corresponding parameter\n//   Our render block would appear as follows:\n//   render() {\n//   return (<div>\n//   <h1>Hello, React..</h1>\n//   <p>I am form child and the buttons below are fom child. Click on the corresponding buttom to update counter value in parent</p>\n//   <button onClick={(e) => this.props.onClick(‘increment’)}>Increment</button><br/><br/>\n//   <button onClick={(e) => this.props.onClick(‘decrement’)}>Decrement</button>\n//   </div>\n//   )\n//   }\n//   Final code:\n//   class App extends React.Component {\n//   constructor(props) {\n//   super(props);\n//   this.state = {\n//   counter: 0\n//   }\n//   this.updateCounter = this.updateCounter.bind(this);\n//   }\n//   updateCounter(type){\n//   var count = this.state.counter;\n//   type==’increment’? count++: count — ;\n//   this.setState({counter: count});\n//   }\n//   render() {\n//   return (<div>\n//   Value of counter in parent is {this.state.counter}\n//   <Child onClick={this.updateCounter}/>\n//   </div>\n//   )\n//   }\n//   }\n//   class Child extends React.Component{\n//   constructor(props) {\n//   super(props);\n//   }\n//   render() {\n//   return (<div>\n//   <h1>Hello, React..</h1>\n//   <p>I am form child and the buttons below are fom child. Click on the corresponding buttom to update counter value in parent</p>\n//   <button onClick={(e) => this.props.onClick(‘increment’)}>Increment</button><br/><br/>\n//   <button onClick={(e) => this.props.onClick(‘decrement’)}>Decrement</button>\n//   </div>\n//   )\n//   }\n//   }","map":{"version":3,"sources":["/Users/Phillipe/sei/code-alongs/culture_club/culture-club-app/src/App.js"],"names":["React","Component","Main","UserStore","App","state","session","handleSession","setState","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,SAAP,MAAsB,wBAAtB,C,CACA;;AACA,OAAO,WAAP;;AAEA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAC1BI,KAD0B,GAClB;AACNC,MAAAA,OAAO,EAAE;AADH,KADkB;;AAAA,SAI1BC,aAJ0B,GAIVD,OAAO,IAAI;AACzB,WAAKE,QAAL,CAAcH,KAAK,KAAK;AACtBC,QAAAA,OAAO,EAAE,CAACD,KAAK,CAACC;AADM,OAAL,CAAnB;AAGD,KARyB;AAAA;;AAS1BG,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAAM,MAAA,OAAO,EAAE,KAAKF,aAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,CADF;AAUD;;AApByB;;AAuB5B,eAAeH,GAAf,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA","sourcesContent":["import React, { Component } from 'react';\nimport Main from './components/main/Main'\nimport UserStore from './components/UserStore'\n// import Turbulance from './components/Turbulance'\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    session: false\n  }\n  handleSession = session => {\n    this.setState(state => ({\n      session: !state.session\n    }));\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div>\n          <Main onLogIn={this.handleSession} />\n        </div>\n        {/* <Turbulance /> */}\n        <div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n\n// class App extends React.Component {\n//   constructor(props) {\n//   super(props);\n//   this.state = {\n//   counter: 0\n//   }\n//   this.updateCounter = this.updateCounter.bind(this);\n\n//   }\n//   updateCounter(type){\n//   var count = this.state.counter;\n//   type==’increment’? count++: count — ;\n//   this.setState({counter: count});\n//   }\n\n//   render() {\n//   return (<div>\n//   Value of counter in parent is {this.state.counter}\n\n//   </div>\n//   )\n//   }\n//   }\n//   Now we would create a child component that has 2 buttons.\n//   class Child extends React.Component{\n//   constructor(props) {\n//   super(props);\n//   }\n//   render() {\n//   return (<div>\n//   <h1>Hello, React..</h1>\n//   <p>I am form child and the buttons below are fom child. Click on the corresponding buttom to update counter value in parent</p>\n//   <button>Increment</button><br/><br/>\n//   <button>Decrement</button>\n\n//   </div>\n//   )\n//   }\n\n//   }\n//   Now, in order to make the updateCounter function in parent to be available to the child component, we pass it as a property to the child component. Render block in our Parent/App component can be updated as follows:\n//   render() {\n//   return (<div>\n//   Value of counter in parent is {this.state.counter}\n//   <Child onClick={this.updateCounter}/>\n//   </div>\n//   )\n//   }\n//   In order to use the function in child component, now we can simply use {this.props.onClick} on button click in the child component and pass the corresponding parameter\n//   Our render block would appear as follows:\n//   render() {\n//   return (<div>\n//   <h1>Hello, React..</h1>\n//   <p>I am form child and the buttons below are fom child. Click on the corresponding buttom to update counter value in parent</p>\n//   <button onClick={(e) => this.props.onClick(‘increment’)}>Increment</button><br/><br/>\n//   <button onClick={(e) => this.props.onClick(‘decrement’)}>Decrement</button>\n\n//   </div>\n//   )\n//   }\n//   Final code:\n//   class App extends React.Component {\n//   constructor(props) {\n//   super(props);\n//   this.state = {\n//   counter: 0\n//   }\n//   this.updateCounter = this.updateCounter.bind(this);\n\n//   }\n//   updateCounter(type){\n//   var count = this.state.counter;\n//   type==’increment’? count++: count — ;\n//   this.setState({counter: count});\n//   }\n\n//   render() {\n//   return (<div>\n//   Value of counter in parent is {this.state.counter}\n//   <Child onClick={this.updateCounter}/>\n//   </div>\n//   )\n//   }\n//   }\n//   class Child extends React.Component{\n//   constructor(props) {\n//   super(props);\n//   }\n//   render() {\n//   return (<div>\n//   <h1>Hello, React..</h1>\n//   <p>I am form child and the buttons below are fom child. Click on the corresponding buttom to update counter value in parent</p>\n//   <button onClick={(e) => this.props.onClick(‘increment’)}>Increment</button><br/><br/>\n//   <button onClick={(e) => this.props.onClick(‘decrement’)}>Decrement</button>\n\n//   </div>\n//   )\n//   }\n\n//   }"]},"metadata":{},"sourceType":"module"}